// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Training {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?   @db.Text
  isPublished Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]

  @@index([categoryId])
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  trainings Training[]
}

model Chapter {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)

  trainingId String
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([trainingId])
}

model UserProgress {
  id     String @id @default(uuid()) @map("_id")
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}
